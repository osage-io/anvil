name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.1.0'

env:
  GO_VERSION: '1.21'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./internal/...
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./internal/... | tee benchmark.txt
    
    - name: Fuzz testing
      run: |
        chmod +x fuzz_test.sh
        timeout 120s ./fuzz_test.sh || true

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64
            extension: .exe
          - goos: windows
            goarch: arm64
            suffix: windows-arm64
            extension: .exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        go build -ldflags="-s -w -X main.version=${GITHUB_REF_NAME:-${{ github.event.inputs.tag }}}" \
          -o dist/anvil-${{ matrix.suffix }}${{ matrix.extension }} \
          cmd/anvil/main.go
    
    - name: Create release archive
      run: |
        cd dist
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          zip -r anvil-${{ matrix.suffix }}.zip anvil-${{ matrix.suffix }}${{ matrix.extension }}
        else
          tar -czf anvil-${{ matrix.suffix }}.tar.gz anvil-${{ matrix.suffix }}${{ matrix.extension }}
        fi
        ls -la
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: anvil-${{ matrix.suffix }}
        path: dist/*
        retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release/
        ls -la release/
    
    - name: Generate checksums
      run: |
        cd release
        sha256sum * > checksums.txt
        cat checksums.txt
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name || github.event.inputs.tag }}
        name: Anvil ${{ github.ref_name || github.event.inputs.tag }}
        body: |
          # Anvil Cold Wallet Generator ${{ github.ref_name || github.event.inputs.tag }}
          
          A secure, offline multi-cryptocurrency cold wallet generator built in Go.
          
          ## Features
          - ✅ Multi-cryptocurrency support (BTC, ETH, DOGE, BNB, TRX)
          - ✅ Multiple output formats (JSON, text, paper wallet, QR codes)
          - ✅ BIP39/BIP32 compliance
          - ✅ Security hardened with memory protection
          - ✅ Cross-platform support
          
          ## Supported Platforms
          - **Linux**: amd64, arm64
          - **macOS**: Intel (amd64), Apple Silicon (arm64)
          - **Windows**: amd64, arm64
          
          ## Installation
          1. Download the appropriate binary for your platform
          2. Extract the archive
          3. Run `./anvil --help` to get started
          
          ## Security
          - Always verify checksums before use
          - Run on an air-gapped machine for maximum security
          - Never share your mnemonic phrase or private keys
          
          See the [documentation](https://github.com/osage/anvil) for detailed usage instructions.
        files: |
          release/*
        draft: false
        prerelease: false
        generate_release_notes: true
